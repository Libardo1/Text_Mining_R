head(melt(tips))
library(reshape)
head(melt(tips))
names(airquality)
names(airquality) <- tolower(names(airquality))
names(airquality)
melt(airquality, id=c("month", "day"))
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
stopifnot(as.character(m1[, 1]) == as.character(m2[, 1]),
all.equal(m1[, -1], m2[, -1][ names(m1)[-1] ]),
dim(merge(m1, m2, by = integer(0))) == c(36, 10))
authors
books
intersect(authors,books)
intersect(names(authors),names(books)
)
intersect(names(authors),names(books))
intersect(authors$surname,books$name)
join(authors,books)
library(plyr)
require(plyr)
join(authors,books)
authors
books
join(books,authors)
colnames(authors) <- c('name','nationality','deceased')
join(books,authors)
join(authors,books)
aggregate(state.x77, list(Region = state.region), mean)
state.x77
state.region
state
state.name
cbind(state.name,state.region)
class(state.region)
state.region[1]
state.region[2]
aggregate(state.x77, list(Region = state.region), max)
aggregate(state.x77, list(Region = state.region), mean)
library(mtcars)
data(mtcars)
mtcars
names(mtcars)
cars
names(mtcars)
example(mtcars)
pairs(c(mtcars$mpg,mtcars$gear), main = "MPG-Gear")
myData <- cbind(mtcars$mpg,mtcars$gear)
pairs(cbind(mtcars$mpg,mtcars$gear), main = "MPG-Gear")
summary(mtcars$mpg)
mtcars$gear
head(mtcars)
pairs(cbind(mtcars$mpg,mtcars$am), main = "MPG-Transmissions")
mpg <- mtcars$mpg
mpg
mtcars$am
am <- mtcars$am
hist(am,mpg)
cbind(mpg,am)
x <- cbind(mpg,am)
x
hist(x)
hist(x,breaks=10)
hist(x,breaks=50)
hist(x,breaks=20)
y <- x
y$am <- 1 - y$am
class(y$am)
class(y[2])
y$am
y[2]
y[,2]
class(y[,2])
y[,2] <- 1 - y[,2]
y
hist(y,breaks=20)
x
y
hist(x,breaks=10)
hist(y,breaks=10)
x <- am==1
x
x <- cbind(mtcars$mpg,mtcars$am)
x
z <- x
x <- x[x[,2]==1,]
x
hist(x)
x
hist(x,breaks=10)
hist(x,breaks=20)
hist(x,breaks=30)
hist(x,breaks=35)
hist(x,breaks=70)
hist(x,breaks=140)
hist(x[,1],breaks=10)
x <- x[,1]
x
y <- mtcars[matcars$am==0,1]
y <- mtcars[mtcars$am==0,1]
y
hist(y,breaks=10)
hist(y,breaks=50)
hist(y,breaks=5)
hist(x,breaks=5)
hist(x,breaks=7)
hist(x,breaks=5)
mtcars
acars <- mtcars[mtcars$am==1,]
acars
mcars <- mtcars[mtcars$am==0,]
mcars
mcars$am <- NULL
mcars
acars
acars$am <- NULL
acars
pairs(acars)
pairs(mcars)
intersect(mcars[,2:10],acars[,2:10])
acars
mcars
rownames(acars)
rownames(mcars)
intersect(rownames(mcars),rownames(acars))
head(mcars)
mcars
aggregate(mcars,by=c(cyl,disp,hp,drat,wt,qsec,vs,gear,carb))
aggregate(mcars,by=c(cyl,disp,hp,drat,wt,qsec,vs,gear,carb),summary)
aggregate(mcars,by=c(mcars$cyl,mcars$disp,mcars$hp,mcars$drat,mcars$wt,mcars$qsec,mcars$vs,mcars$gear,mcars$carb),summary)
aggregate(mcars,names(mcars)[2:10],mean)
aggregate(mcars,list(names(mcars)[2:10]),mean)
list(names(mcars[2:10]))
search()
aggregate(mcars$mpg,list(mcars$vs),means)
aggregate(mcars$mpg,list(mcars$vs),mean)
aggregate(mtcars$mpg,list(mcars$am),mean)
aggregate(mtcars$mpg,list(mtcars$am),mean)
aggregate(mtcars$mpg,list(mtcars$am),summary)
cor(mtcars)
min(abs(cor(mtcars)))
min(abs(cor(mtcars)[1,]))
?mtcars
summary(lm(mpg ~ ., data = mtcars))
summary(lm(mpg ~ am, data = mtcars))$coefficients
summary(lm(resid(lm(mpg ~ carb, data = mtcars)) ~ resid(lm(mpg ~ am, data = mtcars)), data = mtcars))$coefficients
cor(mtcars$am,mtcars$carb)
pairs(mtcars,panel=panel.smooth,main="mtcars data",col=3+(mtcars$am==1))
pairs(mcars,panel=panel.smooth,main="manual cars",col=3)
pairs(acars,panel=panel.smooth,main="automatic cars",col=3)
summary(lm(mpg ~ ., data=mcars))$coefficients
summary(lm(mpg ~ ., data=acars))$coefficients
summary(lm(mpg ~ ., data=acars))$coefficients[,1]
summary(lm(mpg ~ ., data=mcars))$coefficients[,1]
coef(lm(mpg ~ ., data=mcars))
coef(lm(mpg ~ ., data=mtcars))
hist(mtcars[,mtcars$am==1]$mpg,breaks=20)
head(mtcars$am)
hist(mtcars[mtcars$am==1,]$mpg,breaks=20)
hist(mtcars[mtcars$am==1,]$mpg,breaks=10)
hist(mtcars[mtcars$am==0,]$mpg,breaks=10)
boxplot(mpg ~ am, data=mtcars)
boxplot(mpg~am, data=mtcars,outline=TRUE)
mtcars
aggregate(mtcars$mpg,list(mtcars$am),summary)
aggregate(mtcars$mpg,list(mtcars$am),mean)
aggregate(mtcars$mpg,list(mtcars$cyl),mean)
aggregate(mtcars$mpg,list(mtcars$wt),mean)
names(mtcars)
aggregate(mtcars$mpg,list(mtcars$gear),mean)
aggregate(mtcars$mpg,list(mtcars$disp),mean)
swirl
swirl()
library(swirl)
swirl()
cor(gpc_nor,pch_nor)
cor(gpc_nor,gch_nor)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(fit$residuals^2/(n-1))
sqrt(sum(fit$residuals^2)/(n-1))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mean(galton$child))^2)
sTot <- sum((galton$child - mu)^2)
sRes <- sum(fit$residuals^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
(cor(galton$child,galton$parent))^2
cor(galton$child,galton$parent)^2
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit,fit2),coef)
shiny::runApp('JHU9 - Developing Data Products/5 My Projects/Project For Deploy')
install.packages("ggvis")
shiny::runApp('JHU9 - Developing Data Products/5 My Projects/Project For Deploy')
x <- data(iris)
x
x <- iris
flower <- iris
shiny::runApp('JHU9 - Developing Data Products/5 My Projects/Project For Deploy')
fancyRpartPlot(modFit)
flower <- iris
modFit <- rpart(Species ~ ., data=flower)
fancyRpartPlot(modFit)
shiny::runApp('JHU9 - Developing Data Products/5 My Projects/Project For Deploy')
test
test <- data.frame('Sepal.Length' = 6.1,
'Sepal.Width' = 2.9,
'Petal.Length' = 4.7,
'Petal.Width' = 1.4
)
test
predict(modFit,newdata=test)
x <- predict(modFit,newdata=test)
x[2]
index <- x == max(x)
index
names(x)[index]
names(x)
colname(x)
colnames(x)
colnames(x)[index]
shiny::runApp('JHU9 - Developing Data Products/5 My Projects/Project For Deploy')
a <- c(1,1,1,1,2,2,2,2,2)
b <- c(10,12,15,12,NA,30,42,38,40)
s <- split(b,a)
lapply(s,mean)
s
shiny::runApp('WU01 - Introduction to Data Science/6 My Projects/Coursolve/My R Code/SampleCode For GeoInfor')
qt(0.025,df=21)
qr(0.025)
qnorm(0.025)
pt(2.30,df=21)
pt(2.30,df=21,lower.tail=FALSE)
pt(2.30,df=21,lower.tail=TRUE)
library(googleVis)
head(Exports) # let's peek at the data
Geo <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(height=300, width=350))
Tbl <- gvisTable(Exports, options=list(height=300, width=200))
plot(gvisMerge(Geo, Tbl, horizontal=TRUE))
library(rnlp)
install.packages("rnlp")
install.packages("openNLP")
library(openNLP)
install.packages("openNLP")
install.packages("openNLPdata")
library(openNLP)
library('openNLP')
install.packages("tm")
library(tm)
library(NLP)
version
library(openNLP)
library(rJava)
install.packages(rJava)
install.packages('rJava')
library('rJava')
library("openNLP", lib.loc="~/R/win-library/3.1")
library("openNLPdata", lib.loc="~/R/win-library/3.1")
install.packages('sparkR')
install.packages('bigR')
install.packages('bigr')
install.packages('rJava')
library(rJava)
library('rJava')
getwd()
setwd("C:/Users/Chuan/Documents/GitHub/Text_Mining_R")
